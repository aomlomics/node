generator py {
  provider             = "prisma-client-py"
  recursive_type_depth = "5"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Feature {
  id                  String       @id @default(cuid())
  featureId           String
  consensusTaxonomyId String?
  sequence            String
  Assignment          Assignment[]
  Taxonomy            Taxonomy?    @relation(fields: [consensusTaxonomyId], references: [id])
}

model Occurrence {
  id               String @id @default(cuid())
  organismQuantity Int
  Feature          String
}

model Taxonomy {
  id               String       @id @default(cuid())
  taxonClass       String?      @map("class")
  family           String?
  genus            String?
  kingdom          String?
  order            String?
  phylum           String?
  species          String?
  stringIdentifier String       @unique
  Assignment       Assignment[]
  Feature          Feature[]
}

model Assignment {
  id         String   @id
  TaxonomyId String
  featureId  String
  runId      String
  confidence Float
  Taxonomy   Taxonomy @relation(fields: [TaxonomyId], references: [id])
  Feature    Feature  @relation(fields: [featureId], references: [id])
  Run        Run      @relation(fields: [runId], references: [id])
}

model Bioinformatics {
  id          String     @id
  step2_18SId String?
  step2_16SId String?
  Step2_16S   Step2_16S? @relation(fields: [step2_16SId], references: [id])
  Step2_18S   Step2_18S? @relation(fields: [step2_18SId], references: [id])
}

model GenericData {
  id    String @id
  key   String
  value String
}

model Measurement {
  id                String   @id
  date_modified     DateTime
  uploadedBy        String
  aoml_term         String   @unique
  aoml_file         String
  measurementType   String?
  measurementUnit   String?
  measurementTypeID String?
  measurementUnitID String?
}

model Project {
  id                     String  @id
  project_name           String
  project_id_external    String
  project_id_internal    String?
  projectContact         String
  projectContactID       String?
  project_description    String
  study_area_description String?
  sampling_description   String?
  keywords               String?
  grant_number           Int?
  grant_title            String?
  grant_agency           String?
  recordedBy             String?
  recordedByID           String?
  institution            String?
  institutionID          String?
  associated_parties     String?
  license                String
  rightsHolder           String?
  accessRights           String?
  informationWithheld    String?
  dataGeneralizations    String?
  bibliographicCitation  String?
  associated_resource    String?
  experimental_factor    String?
  detection_type         String?
  citation               String?
  project_proposal       String?
  Step1                  Step1[]
}

model Run {
  id         String       @id
  Assignment Assignment[]
}

model Step1 {
  id                             String         @id
  projectId                      String
  step1_MetadataId               String
  sample_name                    String
  sample_name_original           String
  sample_type                    sample_type?
  serial_number                  String?
  cruise_id                      String?
  line_id                        String?
  station                        String?
  locationID                     String?
  habitat_natural_artificial_0_1 String?
  ctd_bottle_no                  String?
  sample_replicate               String?
  source_material_id             String?
  biological_replicates          String?
  notes_sampling                 String?
  verbatimEventDate              String?
  eventDate                      String
  minimumDepthInMeters           Float?
  maximumDepthInMeters           Float?
  env_broad_scale                String
  env_local_scale                String
  env_medium                     String
  geo_loc_name                   String
  waterBody                      String?
  country                        String?
  decimalLatitude                Float?
  decimalLongitude               Float?
  collection_method              String?
  samp_collect_device            String?
  samp_size                      Float?
  samp_size_unit                 String?
  extract_number                 String?
  samp_mat_process               String?
  filter_passive_active_0_1      String?
  filter_onsite_dur              String?
  size_frac                      String?
  samp_vol_we_dna_ext            String?
  samp_vol_ext_unit              Float?
  sample_title                   String?
  bioproject_accession           String?
  biosample_accession            String?
  organism                       String
  description                    String?
  amplicon_sequenced             String?
  metagenome_sequenced           String?
  sterilise_method               String?
  samp_store_dur                 String?
  samp_store_loc                 String?
  samp_store_temp                Float?
  samp_store_sol                 String?
  Project                        Project        @relation(fields: [projectId], references: [id])
  Step1_Metadata                 Step1_Metadata @relation(fields: [step1_MetadataId], references: [id])
  Step2_16S                      Step2_16S[]
  Step2_18S                      Step2_18S[]
}

model Step1_Metadata {
  id                    String  @id
  nucl_acid_ext         String?
  nucl_acid_ext_kit     String?
  nucl_acid_ext_modify  String?
  precip_method_ext     String?
  dna_cleanup_0_1       String?
  dna_cleanup_method    String?
  concentration_method  String?
  seq_kit               String?
  lib_layout            String
  adapter_forward       String?
  adapter_reverse       String?
  seq_facility          String?
  lib_screen            String?
  platform              String
  instrument_model      String
  seq_meth              String?
  seq_method_additional String?
  Step1                 Step1[]
}

model Step2_16S {
  id             String           @id
  step1Id        String
  Bioinformatics Bioinformatics[]
  Step1          Step1            @relation(fields: [step1Id], references: [id])
}

model Step2_18S {
  id             String           @id
  step1Id        String
  Bioinformatics Bioinformatics[]
  Step1          Step1            @relation(fields: [step1Id], references: [id])
}

model Step2_Metadata {
  id String @id
}

enum depth_category {
  dcm
  deep
  diw
  sediment
  surface
}

enum filetype {
  bam
  srf
  sff
  fastq
  native                  @map("454_native")
  helicos_native
  solid_native
  pacbio_hdf5
  completegenomics_native
  oxfordnanopore_native
}

enum instrument_model {
  BGISEQ_500    @map("BGISEQ-500")
  DNBSEQ_G400   @map("DNBSEQ-G400")
  DNBSEQ_T7     @map("DNBSEQ-T7")
  DNBSEQ_G50    @map("DNBSEQ-G50")
  MGISEQ_2000RS @map("MGISEQ-2000RS")
}

enum lib_layout {
  paired
  single
}

enum library_selection {
  random
  pcr
  RANDOM_PCR                             @map("RANDOM PCR")
  RT_PCR                                 @map("RT-PCR")
  hmpr
  mf
  CF_S                                   @map("CF-S")
  CF_M                                   @map("CF-M")
  CF_H                                   @map("CF-H")
  CF_T                                   @map("CF-T")
  mda
  msll
  cdna
  chip
  mnase
  dnase
  Hybrid_Selection                       @map("Hybrid Selection")
  Reduced_Representation                 @map("Reduced Representation")
  Restriction_Digest                     @map("Restriction Digest")
  methylcytidine_antibody                @map("5-methylcytidine antibody")
  MBD2_protein_methyl_CpG_binding_domain @map("MBD2 protein methyl-CpG binding domain")
  cage
  race
  size_fractionation                     @map("size fractionation")
  Padlock_probes_capture_method          @map("Padlock probes capture method")
  other
  unspecified
  cnda_oligo_dt
  cdna_randomprinting
  Inverse_rRNA                           @map("Inverse rRNA")
  Oligo_dT                               @map("Oligo-dT")
  polya
  repeat_fractionation                   @map("repeat fractionation")
}

enum library_source {
  genomic
  transcriptomic
  metagenomic
  metatranscriptomic
  synthetic
  VIRAL_RNA                  @map("VIRAL RNA")
  GENOMIC_SINGLE_CELL        @map("GENOMIC SINGLE CELL")
  TRANSCRIPTOMIC_SINGLE_CELL @map("TRANSCRIPTOMIC SINGLE CELL")
  other
}

enum library_strategy {
  wga
  wgs
  wxs
  RNA_Seq                                 @map("RNA-Seq")
  miRNA_Seq                               @map("miRNA-Seq")
  wcs
  clone
  poolclone
  amplicon
  cloneend
  finishing
  ChIP_Seq                                @map("ChIP-Seq")
  MNase_Seq                               @map("MNase-Seq")
  DNase_Hypersensitivity                  @map("DNase-Hypersensitivity")
  Bisulfite_Seq                           @map("Bisulfite-Seq")
  Tn_Seq                                  @map("Tn-Seq")
  est
  FL_cDNA                                 @map("FL-cDNA")
  cts
  MRE_Seq                                 @map("MRE-Seq")
  MeDIP_Seq                               @map("MeDIP-Seq")
  MDB_Seq                                 @map("MDB-Seq")
  Synthetic_Long_Read                     @map("Synthetic-Long-Read")
  ATAC_seq                                @map("ATAC-seq")
  ChIA_PET                                @map("ChIA-PET")
  FAIRE_seq                               @map("FAIRE-seq")
  Hi_C                                    @map("Hi-C")
  ncRNA_Seq                               @map("ncRNA-Seq")
  RAD_Seq                                 @map("RAD-Seq")
  RIP_Seq                                 @map("RIP-Seq")
  selex
  ssrna_seq
  Targeted_Capture                        @map("Targeted-Capture")
  Tethered_Chromatin_Conformation_Capture @map("Tethered Chromatin Conformation Capture")
  other
}

enum oxy_stat_samp {
  aerobic
  anaerobic
}

enum plate {
  plate1
  plate2
  plate3
  plate4
  plate5
  plate6
}

enum platform {
  LS454             @map("_LS454")
  abi_solid
  bgiseq
  capillary
  complete_genomics
  helicos
  illumina
  ion_torrent
  oxford_nanopore
  pacbio_smrt
}

enum rel_to_oxy {
  aerobe
  anaerobe
  facultative
  microaerophilic
  microanaerobe
  obligate_aerobe   @map("obligate aerobe")
  obligate_anaerobe @map("obligate anaerobe")
  missing
  not_applicable    @map("not applicable")
  not_collected     @map("not collected")
  not_provided      @map("not provided")
  restricted_access @map("restricted access")
}

enum replicate {
  a
  b
  c
}

enum sample_collection_device {
  Extraction_filter             @map("Extraction filter")
  MilliQ_carboy                 @map("MilliQ carboy")
  Niskin_bottle                 @map("Niskin bottle")
  PCR_negative_control          @map("PCR negative control")
  Positive_control__16S_        @map("Positive control (16S)")
  Sediment_core__aqueous_layer_ @map("Sediment core (aqueous layer)")
}

enum sample_collection_method {
  CTD_rosette                   @map("CTD rosette")
  Extraction_filter             @map("Extraction filter")
  MilliQ_carboy                 @map("MilliQ carboy")
  PCR_negative_control          @map("PCR negative control")
  Positive_control__16S_        @map("Positive control (16S)")
  Sediment_core__aqueous_layer_ @map("Sediment core (aqueous layer)")
}

enum sample_type {
  seawater
  sediment
  extraction_blank        @map("extraction blank")
  distilled_water_blank   @map("distilled water blank")
  RTSF_blank              @map("RTSF blank")
  mock_community          @map("mock community")
  positive_control        @map("positive control")
  PCR_no_template_control @map("PCR no-template control")
  bead_cleanup_blank      @map("bead cleanup blank")
  mock
  pcr_blank
}

enum target_gene {
  S_rRNA__18S_rRNA_ @map("{16S rRNA, 18S rRNA}")
}

enum tidal_stage {
  low
  high
}
