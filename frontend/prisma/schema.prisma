datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

// Generators
generator js {
    provider = "prisma-client-js"
}

generator dbml {
    provider   = "prisma-dbml-generator"
    outputName = "OpalERD.dbml"
}

generator zod {
    provider                 = "zod-prisma-types"
    createInputTypes         = false
    addIncludeType           = false
    addSelectType            = false
    writeNullishInModelTypes = true
}

// Enums
enum detection_type {
    targeted_taxon_detection @map("targeted taxon detection")
    multi_taxon_detection    @map("multi taxon detection")
    other
}

enum neg_cont_type {
    site_negative       @map("site negative")
    field_negative      @map("field negative")
    process_negative    @map("process negative")
    extraction_negative @map("extraction negative")
    PCR_negative        @map("PCR negative")
    other
}

enum target_gene {
    twelveS_rRNA       @map("12S rRNA")
    sixteenS_rRNA      @map("16S rRNA")
    eighteenS_rRNA     @map("18S rRNA")
    twenty_threeS_rRNA @map("23S rRNA")
    twenty_eightS_rRNA @map("28S rRNA")
    rbcL
    CytB
    COI
    COII
    COIII
    nifH
    ITS
    ND1
    ND2
    ND3
    ND4
    ND5
    ND6
    amoA
    rpoB
    rpoC1
    rpoC2
    matK
    trnH
    trnL
    psbK
    D_loop             @map("D-loop")
    //empty option
    other
}

enum probeQuencher {
    Zero_End_Quencher_ZEN   @map("Zero-End Quencher (ZEN)")
    TAMRA
    lowa_Black              @map("lowa Black")
    Minor_Groove_Binder_MGB @map("Minor Groove Binder (MGB)")
    Black_Hole_Quencher_BHQ @map("Black Hole Quencher (BHQ)")
    other
}

enum barcoding_pcr_appr {
    one_step_PCR   @map("one-step PCR")
    two_step_PCR   @map("two-step PCR")
    ligation_based @map("ligation-based")
    other
}

enum platform {
    ILLUMINA
    BGISEQ
    CAPILLARY
    DNBSEQ
    ELEMENT
    GENAPSYS
    GENEMIND
    HELICOS
    ION_TORRENT
    LS454
    OXFORD_NANOPORE
    PACBIO_SMRT
    TAPESTRI
    VELA_DIAGNOSTICS
    ULTIMA
    other
}

enum lib_layout {
    paired_end @map("paired end")
    single_end @map("single end")
    other
}

enum error_rate_type {
    Phred_score         @map("Phred score")
    expected_error_rate @map("expected error rate")
    other
}

enum min_reads_cutoff_unit {
    reads
    percent @map("%")
    other
}

enum tax_assign_cat {
    sequence_similarity  @map("sequence similarity")
    sequence_composition @map("sequence composition")
    phylogeny
    probabilistic
    other
}

enum samp_category {
    sample
    negative_control @map("negative control")
    positive_control @map("positive control")
    PCR_standard     @map("PCR standard")
    other
}

enum verbatimCoordinateSystem {
    decimal_degrees         @map("decimal degrees")
    degrees_minutes_seconds @map("degrees minutes seconds")
    UTM
    other
}

enum verbatimSRS {
    WGS84
    NAD84
    NAD27
    GDA94
    GDA2020
    ETRS89
    JGD2000
    other
}

enum eventDurationUnit {
    minutes
    hours
    days
    months
    years
}

// Models
model Study {
    project_id String @id @unique

    // Relations
    Samples     Sample[]
    GenericData GenericData[]

    // Data
    // Project
    recordedBy      String
    recordedByID    String?
    project_contact String
    institution     String?
    institutionID   String?
    project_name    String?
    study_factor    String?
    detection_type  detection_type

    // Data Management
    license               String?
    rightsHolder          String?
    accessRights          String?
    informationWithheld   String?
    dataGeneralizations   String?
    bibliographicCitation String? // DOI
    associated_resource   String?
    mod_date              String? // fixed
    checkls_ver           Float
    seq_archive           String?
    code_repo             String?

    // Uncategorized
    expedition_id String?
}

model Sample {
    samp_name String @id @unique

    // Relations
    project_id  String
    Study       Study         @relation(fields: [project_id], references: [project_id])
    Assays      Assay[]
    Occurrence  Occurrence[]
    GenericData GenericData[]

    // Data
    // Sample Collection
    samp_category                  samp_category
    decimalLatitude                Float
    decimalLongitude               Float
    verbatimLatitude               String?
    verbatimLongitude              String?
    verbatimCoordinateSystem       verbatimCoordinateSystem?
    verbatimSRS                    verbatimSRS?
    geo_loc_name                   String // fixed
    eventDate                      String // fixed
    eventDurationValue             Float?
    eventDurationUnit              eventDurationUnit?
    verbatimEventDate              String?
    verbatimEventTime              String?
    verbatimDateEnd                String?
    verbatimTimeEnd                String?
    env_broad_scale                String // fixed
    env_local_scale                String // fixed
    env_medium                     String // fixed
    habitat_natural_artificial_0_1 Boolean?
    samp_collect_method            String?
    samp_collect_device            String?
    samp_size                      Float?
    samp_size_unit                 String? // controlled

    // Sample Storage
    samp_store_temp              String? // numeric or controlled
    samp_store_sol               String? // controlled
    samp_store_dur               String? // fixed
    samp_store_method_additional String?

    // Sample Preparation
    samp_mat_process          String?
    filter_passive_active_0_1 Boolean?
    filter_onsite_dur         String? // fixed
    size_frac_low             Float?
    size_frac                 Float?
    filter_diameter           Float?
    filter_surface_area       Float?
    filter_material           String? // controlled
    filter_name               String?
    precip_chem_prep          String? // controlled
    precip_force_prep         Float?
    precip_time_prep          Float?
    precip_temp_prep          Float?
    prepped_samp_store_temp   String? // numeric or controlled
    prepped_samp_store_sol    String? // controlled
    prepped_samp_store_dur    Float?
    prep_method_additional    String?

    // Sample Relations
    sample_derived_from     String? // fixed
    sample_composed_of      String? // fixed
    biological_rep_relation String? // fixed

    // Nucleic Acid Extraction
    samp_vol_we_dna_ext             Float?
    samp_vol_we_dna_ext_unit        String? // controlled
    nucl_acid_ext_lysis             String? // controlled
    nucl_acid_ext_sep               String? // controlled
    nucl_acid_ext                   String?
    nucl_acid_ext_kit               String?
    nucl_acid_ext_modify            String?
    dna_cleanup_0_1                 Boolean?
    dna_cleanup_method              String?
    concentration                   Float?
    concentration_method            String?
    ratioOfAbsorbance260_280        Float?
    pool_dna_num                    Int?
    nucl_acid_ext_method_additional String?

    // Environment
    samp_weather         String?
    minimumDepthInMeters Float?
    maximumDepthInMeters Float?
    tot_depth_water_col  Float?
    elev                 Float?
    temp                 Float?
    chlorophyll          Float?
    light_intensity      Float?
    misc_param           Float?
    ph                   Float?
    ph_meth              String?
    salinity             Float?
    suspend_part_matter  Float?
    tidal_stage          String?
    turbidity            Float?
    water_current        Float?
    solar_irradiance     String?
    wind_direction       String?
    wind_speed           Float?
    diss_inorg_carb      Float?
    diss_inorg_nitro     Float?
    diss_org_carb        Float?
    diss_org_nitro       Float?
    diss_oxygen          Float?
    tot_diss_nitro       Float?
    tot_inorg_nitro      Float?
    tot_nitro            Float?
    tot_part_carb        Float?
    tot_org_carb         Float?
    tot_org_c_meth       Float?
    tot_nitro_content    Float?
    tot_nitro_cont_meth  Float?
    tot_carb             Float?
    part_org_carb        Float?
    part_org_nitro       Float?
    nitrate              Float?
    nitrite              Float?
    nitro                Float?
    org_carb             Float?
    org_matter           Float?
    org_nitro            Float?

    // User Defined
    serial_number String?
    cruise_id     String?
    station       String?
    phaeopigments String?
    ammonium      String?
    phosphate     String?
    silicate      String?
}

model Assay {
    assay_name String @id @unique

    // Relations
    Samples     Sample[]
    Libraries   Library[]
    GenericData GenericData[]

    // Data
    // Quality Assurance
    neg_cont_type    neg_cont_type
    pos_cont_type    String
    sterilise_method String?

    // PCR
    pcr_0_1                      Boolean
    thermocycler                 String?
    amplificationReactionVolume  Float?
    assay_validation             String?
    targetTaxonomicAssay         String
    targetTaxonomicScope         String?
    target_gene                  target_gene?
    target_subfragment           String?
    ampliconSize                 Float?
    pcr_primer_forward           String
    pcr_primer_reverse           String
    pcr_primer_name_forward      String?
    pcr_primer_name_reverse      String?
    pcr_primer_reference_forward String?
    pcr_primer_reference_reverse String?
    pcr_primer_vol_forward       Float?
    pcr_primer_vol_reverse       Float?
    pcr_primer_conc_forward      Float?
    pcr_primer_conc_reverse      Float?
    probeReporter                String?
    probeQuencher                probeQuencher?
    probe_seq                    String?
    probe_ref                    String?
    probe_conc                   Float?
    commercial_mm                String?
    custom_mm                    String?
    pcr_dna_vol                  Float?
    pcr_rep                      Int?
    nucl_acid_amp                String?
    pcr_cond                     String?
    annealingTemp                Float?
    pcr_cycles                   Float?
    pcr_analysis_software        String?
    pcr_method_additional        String?

    // PCR (library)
    pcr_plate_id String?

    // Quality Assurrance (samples)
    rel_cont_id String?
}

model Library {
    library_id String @id @unique

    // Relations
    assay_name  String
    Assay       Assay         @relation(fields: [assay_name], references: [assay_name])
    Analysis    Analysis[]
    GenericData GenericData[]

    //Data
    // Library Preparation Sequencing
    barcoding_pcr_appr    barcoding_pcr_appr?
    platform              platform?
    instrument            String? // fixed
    seq_kit               String?
    lib_layout            lib_layout?
    sequencing_location   String?
    adapter_forward       String?
    adapter_reverse       String?
    lib_screen            String?
    seq_method_additional String?

    // Library Preparation Sequencing (library)
    mid_forward         String?
    mid_reverse         String?
    filename            String?
    filename2           String?
    seq_run_id          String?
    biosample_accession String?
    sra_accession       String?
    input_read_count    Int?
}

model Analysis {
    id Int @id @default(autoincrement())

    // Relations
    library_id  String
    Library     Library       @relation(fields: [library_id], references: [library_id])
    Occurrences Occurrence[]
    Assignments Assignment[]
    GenericData GenericData[]

    // Data
    // Bioinformatics
    sop_bioinformatics        String?
    trim_method               String?
    trim_param                String?
    demux_tool                String?
    demux_max_mismatch        Int?
    merge_tool                String?
    merge_min_overlap         Int?
    min_len_cutoff            Int?
    min_len_tool              String?
    error_rate_tool           String?
    error_rate_type           error_rate_type?
    error_rate_cutoff         Float?
    chimera_check_method      String?
    chimera_check_param       String?
    otu_clust_tool            String?
    otu_clust_cutoff          Float?
    min_reads_cutoff          Float?
    min_reads_cutoff_unit     min_reads_cutoff_unit?
    min_reads_tool            String?
    otu_db                    String?
    otu_db_custom             String?
    tax_assign_cat            tax_assign_cat?
    otu_seq_comp_appr         String?
    tax_class_id_cutoff       Float?
    tax_class_query_cutoff    Float?
    tax_class_collapse        String?
    tax_class_other           String?
    screen_contam_method      String?
    screen_geograph_method    String?
    screen_nontarget_method   String?
    screen_other              String?
    bioinfo_method_additional String?
}

// ASVs
model Occurrence {
    id Int @id @default(autoincrement())

    // Relations
    analysisId Int?
    Analysis   Analysis? @relation(fields: [analysisId], references: [id])
    samp_name  String
    Sample     Sample    @relation(fields: [samp_name], references: [samp_name])
    featureid  String
    Feature    Feature   @relation(fields: [featureid], references: [featureid])

    // Data
    organismQuantity Int
}

model Feature {
    featureid String @id @unique

    // Relations
    Occurrences         Occurrence[]
    Assignments         Assignment[]
    consensusTaxonomyId String?
    consensusTaxonomy   Taxonomy?    @relation(fields: [consensusTaxonomyId], references: [taxonomy])

    // Data
    sequence String
}

model Assignment {
    id Int @id @default(autoincrement())

    // Relations
    analysisId Int
    Analysis   Analysis @relation(fields: [analysisId], references: [id])
    featureid  String
    Feature    Feature  @relation(fields: [featureid], references: [featureid])
    taxonomy   String
    Taxonomy   Taxonomy @relation(fields: [taxonomy], references: [taxonomy])

    // Data
    confidence Float
}

model Taxonomy {
    taxonomy String @id @unique

    // Relations
    Assignments Assignment[]
    Features    Feature[]

    //Data
    verbatimIdentification String
    domain                 String?
    kingdom                String?
    supergroup             String?
    division               String?
    subdivision            String?
    phylum                 String?
    taxonClass             String? @map("class")
    order                  String?
    family                 String?
    genus                  String?
    species                String?
}

//Other
model GenericData {
    id Int @id @default(autoincrement())

    // Relations
    project_id String
    Study      Study    @relation(fields: [project_id], references: [project_id])
    samp_name  String
    Sample     Sample   @relation(fields: [samp_name], references: [samp_name])
    assay_name String
    Assay      Assay    @relation(fields: [assay_name], references: [assay_name])
    library_id String
    Library    Library  @relation(fields: [library_id], references: [library_id])
    analysisId Int
    Analysis   Analysis @relation(fields: [analysisId], references: [id])

    // Data
    key   String
    value String
}
